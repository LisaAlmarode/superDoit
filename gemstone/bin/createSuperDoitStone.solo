#!/usr/bin/env superdoit_solo
options
{
SuperDoitOptionalOptionWithRequiredArg long: 'stoneDirectory' default: '$GEMSTONE/data'.
SuperDoitOptionalOptionWithRequiredArg long: 'stoneName' default: 'exampleStone'.
}
%
usage
-----
USAGE 
  $basename [--help | -h] [--debug | -D] <options>

DESCRIPTION
  <put your description here>

OPTIONS
  <stone-name>               Name of the GsDevKit_home stone. <stone-name> argument
                             may be skipped if the script is run in a GsDevKit_home
                             stone directory (i.e., $GS_HOME/server/stones/<stone-name>
  <topaz-command-line-args>  topaz options that should be passed to topaz when running
                             running the script
  -h, --help                 display usage message
  -D, --debug                bring up topaz debugger in the event of a script error

EXAMPLES
  $basename --help
  $basename -h
  $basename -D <options>
  $basename <options>
-----
%
instvars
superDoitRoot
gemstone
stoneDir
%
method
gemstone

	^ gemstone ifNil: [ gemstone := '$GEMSTONE' asFileReference ]
%
method
stoneDir

	^ stoneDir ifNil: [ stoneDir := self stoneDirectory asFileReference ]
%
method
superDoitRoot

	^ superDoitRoot ifNil: [ superDoitRoot := '$SUPERDOIT_DIR' asFileReference ]
%
method
copyFile: sourceFileRef toDir: destDirRef
	| destFileRef |
	destFileRef := destDirRef / sourceFileRef basename.
	destFileRef exists ifTrue: [ destFileRef delete ].
	sourceFileRef copyTo: destFileRef.
	^ destFileRef
%
doit
	| extent systemConf |
	(System gemEnvironmentVariable: 'GEMSTONE')
		ifNil: [ self error: 'environment variable GEMSTONE must be set' ].
	self stoneDir  ensureCreateDirectory.
	logDir := self stoneDir / 'logs'.
	logDir ensureCreateDirectory 
	systemConf := (self gemstone / 'data' / 'system.conf') contents.
	(self stoneDir / 'system.conf')
		writeStreamDo: [:fileStream |
			fileStream 
				nextPutAll: systemConf; lf;
				nextPutAll: 'DBF_EXTENT_NAMES = ', stoneDir pathString, '/extent0.dbf;'; lf;
				nextPutAll: 'STN_TRAN_LOG_DIRECTORIES = ', stoneDir pathString, '/;'; lf;
				yourself ].
	(self stoneDir / '.topazini')
		writeStreamDo: [:fileStream |
			fileStream 
				nextPutAll: 'set GEMSTONE ', self stoneName; lf;
				nextPutAll: 'set user SystemUser'; lf;
				nextPutAll: 'set password swordfish'; lf;
			yourself ].
	extent := self 
		copyFile: self gemstone / 'bin' / 'extent0.dbf' 
		toDir: self stoneDir.
	GsHostProcess execute: '/bin/chmod +w ', extent pathString.
	^ true
%
