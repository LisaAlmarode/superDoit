#!/usr/bin/env superdoit_solo
usage
USAGE $basename [-h | -D]

DESCRIPTION
  Test argsDict.doit script

OPTIONS
  -h
    display usage message
  -D
    debug; halt when a test fails
%
doit
	| debug argDictCommand count passed failed errors failedArgs summary |
	argDictCommand := '$projectDir'  asFileReference / 'tests' / 'argsDict.doit'.
	count := passed := failed := errors := 0.
	failedArgs := {}.
	debug := false.
	(self scriptArgs size > 1)
		ifTrue: [ 
			((self scriptArgs at: 2) = '-h')
				ifTrue: [ ^ self usage ].
			((self scriptArgs at: 2) = '-D')
				ifTrue: [ debug := true ].
			self error: 'Unknown option ', (self scriptArgs at: 2) printString ].
	{
		'123' -> (Dictionary new
			at: 'args' 
				put: { '123' };
			at: 'options'
				put: (Dictionary new);
			yourself).
		'123 456' -> (Dictionary new
			at: 'args' 
				put: { '123' . '456' };
			at: 'options'
				put: (Dictionary new);
			yourself).
		'456 123' -> (Dictionary new
			at: 'args' 
				put: { '456' .'123' };
			at: 'options'
				put: (Dictionary new);
			yourself).
		'--required=123' -> (Dictionary new
			at: 'args' 
				put: { };
			at: 'options'
				put: 
					(Dictionary new
						at: 'required' put: '123';
						yourself);
			yourself).
		'--required=123 456' -> (Dictionary new
			at: 'args' 
				put: { '456' };
			at: 'options'
				put: 
					(Dictionary new
						at: 'required' put: '123';
						yourself);
			yourself).
		'456 --required=123' -> (Dictionary new
			at: 'args' 
				put: { '456' };
			at: 'options'
				put: 
					(Dictionary new
						at: 'required' put: '123';
						yourself);
			yourself).
		'--optional=123' -> (Dictionary new
			at: 'args' 
				put: { };
			at: 'options'
				put: 
					(Dictionary new
						at: 'optional' put: '123';
						yourself);
			yourself).
		'-o 123' -> (Dictionary new
			at: 'args' 
				put: { };
			at: 'options'
				put: 
					(Dictionary new
						at: 'optional' put: '123';
						yourself);
			yourself).
		'-o' -> (Dictionary new
			at: 'args' 
				put: { };
			at: 'options'
				put: 
					(Dictionary new
						at: 'optional' put: nil;
						yourself);
			yourself).
		'-o 123 456 --required=789 12' -> (Dictionary new
			at: 'args' 
				put: { '456' . '12' };
			at: 'options'
				put: 
					(Dictionary new
						at: 'optional' put: '123';
						at: 'required' put: '789';
						yourself);
			yourself).
		'123 -o --required=456 789' -> (Dictionary new
			at: 'args' 
				put: { '123' . '789' };
			at: 'options'
				put: 
					(Dictionary new
						at: 'optional' put: nil;
						at: 'required' put: '456';
						yourself);
			yourself).
		'-r --optional=123' -> (Dictionary new
			at: 'args' 
				put: { };
			at: 'options'
				put: 
					(Dictionary new
						at: 'optional' put: nil;
						at: 'required' put: 'error message';
						yourself);
			yourself).
		'--another=123' -> (Dictionary new
			at: 'args' 
				put: { };
			at: 'options'
				put: 
					(Dictionary new
						at: 'another' put: '123';
						yourself);
			yourself).
	} do: [:assoc |
		| expectedArgsDict actualArgsDict ston args summary |
		count := count + 1.
		args := assoc key.
		expectedArgsDict := assoc value.
		[ ston := GsHostProcess execute: argDictCommand pathString, ' ', args.
		actualArgsDict := STON fromString: ston.
		actualArgsDict = expectedArgsDict
			ifTrue: [ passed := passed + 1 ]
			ifFalse: [ 
				failed := failed + 1.
				failedArgs add: args.
				debug ifTrue: [ self halt] ] 
			] on: ChildError do: [:ex |
					errors := errors + 1.
					failedArgs add: args.
					debug ifTrue: [ self halt] ] ].
	summary := count printString, ' run, ', passed printString, ' passing, ', failed printString, ' failures ',  errors printString, ' errors'.
	self stdout nextPutAll: summary; lf. 
	(failed = 0 and: [ errors = 0])
		ifTrue: [ ^ true  ].
	self log: failedArgs.
	^ false 
%
