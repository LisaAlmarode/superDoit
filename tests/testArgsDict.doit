#!/usr/bin/env superdoit_solo
usage
USAGE $basename [-h | -D]

DESCRIPTION
  Test argsDict.doit script

OPTIONS
  -h
    display usage message
  -D
    debug; halt when a test fails
%
doit
	| debug argDictCommand count passed failed errors failedArgs summary |
	argDictCommand := '$projectDir'  asFileReference / 'tests' / 'argsDict_2.doit'.
	count := passed := failed := errors := 0.
	failedArgs := {}.
	debug := false.
	(self scriptArgs size > 1)
		ifTrue: [ 
			((self scriptArgs at: 2) = '-h')
				ifTrue: [ ^ self usage ].
			((self scriptArgs at: 2) = '-D')
				ifTrue: [ debug := true ]
				ifFalse: [ self error: 'Unknown option ', (self scriptArgs at: 2) printString ] ].
	{
		'123' -> (Dictionary new
			at: 'args' 
				put: { '123' };
			at: 'options'
				put: (Dictionary new);
			yourself).
		'123 456' -> (Dictionary new
			at: 'args' 
				put: { '123' . '456' };
			at: 'options'
				put: (Dictionary new);
			yourself).
		'456 123' -> (Dictionary new
			at: 'args' 
				put: { '456' .'123' };
			at: 'options'
				put: (Dictionary new);
			yourself).
		'--required=123' -> (Dictionary new
			at: 'args' 
				put: { };
			at: 'options'
				put: 
					(Dictionary new
						at: 'required' put: '123';
						yourself);
			yourself).
		'--required=123 456' -> (Dictionary new
			at: 'args' 
				put: { '456' };
			at: 'options'
				put: 
					(Dictionary new
						at: 'required' put: '123';
						yourself);
			yourself).
		'456 --required=123' -> (Dictionary new
			at: 'args' 
				put: { '456' };
			at: 'options'
				put: 
					(Dictionary new
						at: 'required' put: '123';
						yourself);
			yourself).
		'--noshort=123' -> (Dictionary new
			at: 'args' 
				put: { };
			at: 'options'
				put: 
					(Dictionary new
						at: 'noshort' put: '123';
						yourself);
			yourself).
		'--noshort' -> (Dictionary new
			at: 'args' 
				put: { };
			at: 'options'
				put: 
					(Dictionary new
						at: 'noshort' put: '0';
						yourself);
			yourself).
		'--optional=123' -> (Dictionary new
			at: 'args' 
				put: { };
			at: 'options'
				put: 
					(Dictionary new
						at: 'optional' put: '123';
						yourself);
			yourself).
		'--optional' -> (Dictionary new
			at: 'args' 
				put: { };
			at: 'options'
				put: 
					(Dictionary new
						at: 'optional' put: '0';
						yourself);
			yourself).
		'-o 123' -> (Dictionary new
			at: 'args' 
				put: { };
			at: 'options'
				put: 
					(Dictionary new
						at: 'optional' put: '123';
						yourself);
			yourself).
		'-o' -> (Dictionary new
			at: 'args' 
				put: { };
			at: 'options'
				put: 
					(Dictionary new
						at: 'optional' put: '0';
						yourself);
			yourself).
		'-o 123 456 --required=789 12' -> (Dictionary new
			at: 'args' 
				put: { '456' . '12' };
			at: 'options'
				put: 
					(Dictionary new
						at: 'optional' put: '123';
						at: 'required' put: '789';
						yourself);
			yourself).
		'123 -o --required=456 789' -> (Dictionary new
			at: 'args' 
				put: { '123' . '789' };
			at: 'options'
				put: 
					(Dictionary new
						at: 'optional' put: '0';
						at: 'required' put: '456';
						yourself);
			yourself).
		'--another=123' -> (Dictionary new
			at: 'args' 
				put: { };
			at: 'options'
				put: 
					(Dictionary new
						at: 'another' put: '123';
						yourself);
			yourself).
		'--another=123 456' -> (Dictionary new
			at: 'args' 
				put: { '456' };
			at: 'options'
				put: 
					(Dictionary new
						at: 'another' put: '123';
						yourself);
			yourself).
		'456 --another=123' -> (Dictionary new
			at: 'args' 
				put: { '456' };
			at: 'options'
				put: 
					(Dictionary new
						at: 'another' put: '123';
						yourself);
			yourself).

		'--none' -> (Dictionary new
			at: 'args' 
				put: { };
			at: 'options'
				put: 
					(Dictionary new
						at: 'none' put: nil;
						yourself);
			yourself).
		'-n' -> (Dictionary new
			at: 'args' 
				put: { };
			at: 'options'
				put: 
					(Dictionary new
						at: 'none' put: nil;
						yourself);
			yourself).
		'-n 456 --required=789 12' -> (Dictionary new
			at: 'args' 
				put: { '456' . '12' };
			at: 'options'
				put: 
					(Dictionary new
						at: 'none' put: nil;
						at: 'required' put: '789';
						yourself);
			yourself).
		'-a 123 -no 456 789' -> (Dictionary new
			at: 'args' 
				put: { '789' };
			at: 'options'
				put: 
					(Dictionary new
						at: 'none' put: nil;
						at: 'optional' put: '456';
						at: 'another' put: '123';
						yourself);
			yourself).
		'-nDoa 123 456' -> (Dictionary new
			at: 'args' 
				put: { '456' };
			at: 'options'
				put: 
					(Dictionary new
						at: 'none' put: nil;
						at: 'debug' put: nil;
						at: 'optional' put: '0';
						at: 'another' put: '123';
						yourself);
			yourself).

		'--required=123 -o 456 -a 789 -n' -> (Dictionary new
			at: 'args' 
				put: { };
			at: 'options'
				put: 
					(Dictionary new
						at: 'none' put: nil;
						at: 'required' put: '123';
						at: 'optional' put: '456';
						at: 'another' put: '789';
						yourself);
			yourself).
		'--required=123 --optional=456 --another=789 --none' -> (Dictionary new
			at: 'args' 
				put: { };
			at: 'options'
				put: 
					(Dictionary new
						at: 'none' put: nil;
						at: 'required' put: '123';
						at: 'optional' put: '456';
						at: 'another' put: '789';
						yourself);
			yourself).

		'-a 123 --another=123' -> 'UserDefinedError: The option ''another'' has already been processed.'.
		'-n --none' -> 'UserDefinedError: The option ''none'' has already been processed.'.
		'-n -n' -> 'UserDefinedError: The option ''none'' has already been processed.'.
		'-o 123 --optional' -> 'UserDefinedError: The option ''optional'' has already been processed.'.
		'-a --optional=123' -> 'UserDefinedError: Missing required option argument for option ''another'''.
		'-' -> 'UserDefinedError: Cannot handle naked dashes ''-'''.
		'--' -> 'UserDefinedError: Cannot handle naked dashes ''--'''.
		'-x' -> 'UserDefinedError: Unknown option ''x'''.
		'-x something' -> 'UserDefinedError: Unknown option ''x'''.
		'--unknown' -> 'UserDefinedError: Unknown option ''unknown'''.
		'--unknown=something' -> 'UserDefinedError: Unknown option ''unknown'''.
		'--none=something' -> 'UserDefinedError: Unexpected option argument ''something'' for option ''none'''.
	} do: [:assoc |
		| expectedArgsDict actualArgsDict ston args summary |
		count := count + 1.
		args := assoc key.
		expectedArgsDict := assoc value.
		ston := GsHostProcess execute: argDictCommand pathString, ' ', args.
		actualArgsDict := STON fromString: ston.
		actualArgsDict = expectedArgsDict
			ifTrue: [ passed := passed + 1 ]
			ifFalse: [ 
				failed := failed + 1.
				failedArgs add: args.
				debug 
					ifTrue: [ 
						self logMessage: 'actualArgsDict:'.
						STON put: actualArgsDict onStreamPretty: self stdout.
						self logMessage: 'expectedArgsDict:'.
						STON put: expectedArgsDict onStreamPretty: self stdout.
						self halt] ] ].
	summary := count printString, ' run, ', passed printString, ' passing, ', failed printString, ' failures ',  errors printString, ' errors'.
	self stdout nextPutAll: summary; lf. 
	(failed = 0 and: [ errors = 0])
		ifTrue: [ ^ true  ].
	self log: failedArgs.
	^ false 
%
