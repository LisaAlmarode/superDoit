#!/usr/bin/env superdoit_solo
usage
-----
USAGE $basename [-h | -D]

DESCRIPTION
  Test argsDict.doit script

OPTIONS
  -h, --help                 display usage message
  -D, --debug                halt when a test fails
-----
%
input
$SUPERDOIT_DIR/tests/gs/testArgs_shared.gs
%
doit
	| argDictCommand count passed failed errors failedArgs summary scriptErrorClass expectedFail |
	argDictCommand := '$SUPERDOIT_DIR'  asFileReference / 'tests' / 'argsDict.solo'.
	count := passed := failed := errors := expectedFail := 0.
	failedArgs := {}.
	scriptErrorClass := (Rowan globalNamed: 'ChildError') 
		ifNil: [
			"ChildError class is not available in 3.6.0 (present in 3.6.1), so the
				tests for error handling will fail in 3.6.0" 
			Error ].
	 SuperDoitTestArgsData testArgsArray do: [:assoc |
		| expectedArgsDict actualArgsDict ston args expectedFailureMessage |
		count := count + 1.
		args := assoc key.
		expectedArgsDict := assoc value.
		expectedFailureMessage := 'expected to fail in 3.6.0'.
		[ 
			ston := GsHostProcess execute: argDictCommand pathString, ' ', args.
			actualArgsDict := STON fromString: ston
		]
			on: scriptErrorClass
			do: [:ex | 
				actualArgsDict := (ex respondsTo: #stderr)
					ifTrue: [ ex stderr asString trimBoth ]
					ifFalse: [ expectedFailureMessage ] ].

		actualArgsDict = expectedArgsDict
			ifTrue: [ passed := passed + 1 ]
			ifFalse: [
				actualArgsDict = expectedFailureMessage
					ifTrue: [ expectedFail := expectedFail + 1]
          ifFalse: [
						failed := failed + 1.
						failedArgs add: args.
						self debug 
							ifTrue: [ 
								self logMessage: 'actualArgsDict:'.
								STON put: actualArgsDict onStreamPretty: self stdout.
								self stdout lf.
								self logMessage: 'expectedArgsDict:'.
								STON put: expectedArgsDict onStreamPretty: self stdout.
								self stdout lf.
								self halt ] ] ] ].
	summary := count printString, ' run, ', passed printString, ' passing, ', failed printString, ' failures ',  expectedFail printString, ' expected failures ', errors printString, ' errors'.
	self stdout nextPutAll: summary; lf. 
	(failed = 0 and: [ errors = 0])
		ifTrue: [ ^ true  ].
	self log: failedArgs.
	^ false 
%
