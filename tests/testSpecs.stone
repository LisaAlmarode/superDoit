#!/usr/bin/env superdoit_stone
#
options
{
  SuperDoitCommandLineOption long: 'help' short: 'h'.
  SuperDoitCommandLineOption long: 'debug' short: 'D'.
  SuperDoitCommandLineOption long: 'tests' short: 't'.
}
%
usage
-----
USAGE $basename [--help | -h] [--debug | -D] [--tests | -t] [-- [<stone-name> [<topaz-command-line-args>] ] ]

DESCRIPTION
  Load the spec for RowanSample9_spec_0001.ston using the --tests option to control whether or not the Tests are loaded.

OPTIONS
  <stone-name>               Name of the GsDevKit_home stone. <stone-name> argument
                             may be skipped if the script is run in a GsDevKit_home
                             stone directory (i.e., $GS_HOME/server/stones/<stone-name>
  <topaz-command-line-args>  topaz options that should be passed to topaz when running
                             running the script
  -h, --help                 display usage message
  -D, --debug                bring up topaz debugger in the event of a script error
  -t, --tests                If present, load the tests

EXAMPLES
  $basename -h
  $basename -D
  $basename --tests
  $basename
-----
%
projectshome
$SUPERDOIT_STONE_DIR/git
%
specs
[
RwLoadSpecificationV2 {
	#specName : 'spec_0001',
	#projectName : 'RowanSample9',
	#gitUrl : 'git@github.com:dalehenrich/RowanSample9.git',
	#revision : 'spec_0001',
	#projectSpecFile : 'rowan/project.ston',
	#componentNames : [
		'Core'
	],
	#customConditionalAttributes : [
	],
	#platformProperties : {
		'gemstone' : {
			'allusers' : {
				#defaultSymbolDictName : 'RowanSample9_1'
			}
		}
	},
	#comment : 'Bare bones package structure -Core and -Tests'
}
]
%
method
getAndVerifyOptions
		self getOpts: self optionSpecs.
		self help ifTrue: [ ^ self usage ].
%
doit
	| testResult testSuite |
	self getAndVerifyOptions == self noResult
		ifTrue: [ ^ self noResult ].
	[
		| projectName |
		projectName := 'RowanSample9'.
		('$SUPERDOIT_STONE_DIR/git/', projectName) asFileReference ensureDeleteAll. "make sure that we're forced to clone RowanSample9"
		"reload RowanSample9"
		self preDoitSpecLoad: [:spec |
			spec projectName = projectName
				ifTrue: [ 
					self tests 
						ifTrue: [ 
							spec customConditionalAttributes: #('tests') ] ] ].	
		self tests
			ifTrue: [ 
				testSuite := (Rowan projectNamed: projectName) testSuite.
				self debug
					ifTrue: [ 
						testSuite debug.
						^ 'all tests ', projectName, ' tests pass' ]
					ifFalse: [ testResult := testSuite run ] ]
			ifFalse: [
				testSuite := (Rowan projectNamed: projectName) testSuite.
				testSuite tests isEmpty 
					ifFalse: [ 
						self stderr 
							nextPutAll: 'unexpected tests in ', projectName, ' test suite '; lf.
						testSuite tests do: [:test | self stderr tab; nextPutAll: test printString; lf ].
						self exitWithStatus: 1 ] ].
		('$SUPERDOIT_STONE_DIR/git/', projectName) asFileReference ensureDeleteAll. "clean up after we're done"
		^ self tests
			ifTrue: [ projectName, ' test results: ', testResult printString ]
			ifFalse: [ ' NO'. projectName, ' tests run' ].
	] on: Error do: [:ex | 
		self debug ifTrue: [ ex pass ].
		self exit: ex description withStatus: 1 "does not return" ].
%
